"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitAudio = void 0;
var spawn = require('child_process').spawn;
var ffprobe = require('node-ffprobe');
var ffprobeInstaller = require('@ffprobe-installer/ffprobe');
ffprobe.FFPROBE_PATH = ffprobeInstaller.path;
var fs = __importStar(require("fs"));
var ffmpeg = __importStar(require("ffmpeg-static"));
var utils_1 = require("./utils");
var transcription_segment_1 = require("./models/transcription_segment");
var maxClipSize = process.env.MAX_CLIP_SIZE || 20;
var SplitAudio = (function () {
    function SplitAudio(silentLength) {
        this.silentLength = 0.3;
        this.silentLength = silentLength;
    }
    SplitAudio.prototype.onSilence = function (sourceFilePath, jobId) {
        var _this = this;
        console.log('splitFileOnInstancesOfSilence');
        return new Promise(function (resolve, reject) {
            var splitFilesDestination = utils_1.Utils.tempPath + "/_" + jobId;
            try {
                if (!fs.existsSync(splitFilesDestination)) {
                    fs.mkdirSync(splitFilesDestination);
                }
                _this._generateTimeIndexes([sourceFilePath])
                    .then(function (clipInfo) { return __awaiter(_this, void 0, void 0, function () {
                    var pauses, clips, clips_2, segments;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, this._identifyPauses(sourceFilePath)];
                            case 1:
                                pauses = _a.sent();
                                clips = this._getClips(pauses, clipInfo[0].duration);
                                clips_2 = this._divideLongClips(clips);
                                segments = [];
                                return [4, Promise.all(clips_2.map(function (clip, idx) {
                                        try {
                                            var fileName = splitFilesDestination + "/out" + _this._zeroPad(idx) + ".wav";
                                            var args = [
                                                '-ss',
                                                String(clip.start),
                                                '-t',
                                                String(clip.duration),
                                                '-i',
                                                sourceFilePath,
                                                fileName,
                                            ];
                                            segments.push(new transcription_segment_1.TranscriptionSegment(idx, clip.start, clip.duration, fileName));
                                            return _this._runFFmpeg(args);
                                        }
                                        catch (err) {
                                            console.error("ERROR", err);
                                            return "";
                                        }
                                    }))];
                            case 2:
                                _a.sent();
                                resolve(segments);
                                return [2];
                        }
                    });
                }); })
                    .catch(function (err) {
                    console.log("An error occurred splitting the audio " + err);
                    reject(err);
                });
            }
            catch (err) {
                reject(err);
            }
        });
    };
    SplitAudio.prototype._generateTimeIndexes = function (audioFiles) {
        return new Promise(function (resolve, reject) {
            var totalDuration = 0;
            Promise.all(audioFiles.map(function (file) {
                return new Promise(function (resolve, reject) {
                    ffprobe(file).then(function (data) {
                        resolve(data.streams[0].duration);
                    }).catch(function (err) {
                        reject(err);
                    });
                });
            }))
                .then(function (durations) {
                var indexes = durations.map(function (d) {
                    var info = {
                        start: totalDuration,
                        end: totalDuration + d,
                        duration: d
                    };
                    totalDuration += d;
                    return info;
                });
                resolve(indexes);
            })
                .catch(function (err) {
                console.log(err);
                reject(err);
            });
        });
    };
    ;
    SplitAudio.prototype._zeroPad = function (num) {
        if (num < 10) {
            return "00" + num;
        }
        else if (num < 100) {
            return "0" + num;
        }
        else {
            return num;
        }
    };
    ;
    SplitAudio.prototype._runFFmpeg = function (args) {
        return new Promise(function (resolve, reject) {
            try {
                var output_1 = '';
                var process_1 = spawn(ffmpeg.default, args);
                process_1.stdout.on('data', function (data) {
                    console.log("stdout: " + data);
                });
                process_1.stderr.on('data', function (data) {
                    output_1 += data + '\n';
                });
                process_1.on('close', function (code) {
                    if (code == 1) {
                        console.log("FFMPEG exited with status code 1\n\n " + output_1 + "\n\n");
                        reject("FFMPEG exited with status code 1");
                    }
                    else if (code == 0) {
                        resolve(output_1);
                    }
                });
            }
            catch (err) {
                console.error("FFMPEG ERROR", err);
                reject(err);
            }
        });
    };
    ;
    SplitAudio.prototype._identifyPauses = function (sourceFilePath) {
        return __awaiter(this, void 0, void 0, function () {
            var args, output, silences, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        args = [
                            '-i',
                            sourceFilePath,
                            '-af',
                            "silencedetect=n=-40dB:d=" + this.silentLength,
                            '-f',
                            'null',
                            '-'
                        ];
                        console.log('_identifyPauses', sourceFilePath);
                        console.table(args);
                        return [4, this._runFFmpeg(args)];
                    case 1:
                        output = _a.sent();
                        silences = output.split('\n').filter(function (line) {
                            return line.indexOf('[silencedetect @') > -1 && line.indexOf('silence_end') > -1;
                        })
                            .map(function (d) {
                            return d.slice(d.indexOf('silence_end'));
                        })
                            .map(function (d) {
                            var halves = d.split(' | ').map(function (half) { return Number(half.replace(/([A-Za-z\-\_:\ ]+)/, '')); });
                            return {
                                start: halves[0] - halves[1],
                                duration: halves[1],
                                end: halves[0],
                                middle: halves[0] - ((halves[0] - halves[1]) / 2)
                            };
                        });
                        return [2, silences];
                    case 2:
                        err_1 = _a.sent();
                        console.log('_identifyPauses failed', err_1);
                        return [3, 3];
                    case 3: return [2];
                }
            });
        });
    };
    ;
    SplitAudio.prototype._divideLongClips = function (clips) {
        var adjustedClips = [{
                start: 0,
                duration: 0
            }];
        clips.forEach(function (clip) {
            if (clip.duration > maxClipSize) {
                var newClipSize = 4;
                var numNewClips = Math.ceil(clip.duration / newClipSize);
                for (var x = 0; x < numNewClips; x += 1) {
                    var lastClip = adjustedClips[adjustedClips.length - 1];
                    var newClip = void 0;
                    if (x < numNewClips - 1) {
                        newClip = {
                            start: lastClip.start + lastClip.duration,
                            duration: newClipSize
                        };
                    }
                    else {
                        newClip = {
                            start: lastClip.start + lastClip.duration,
                            duration: (clip.start + clip.duration) - (lastClip.start + lastClip.duration)
                        };
                    }
                    adjustedClips.push(newClip);
                }
            }
            else {
                adjustedClips.push(clip);
            }
        });
        adjustedClips.shift();
        return adjustedClips;
    };
    ;
    SplitAudio.prototype._getClips = function (pauses, totalClipDuration) {
        var clips = [];
        var lastPause = 0;
        for (var z = 0; z < pauses.length - 1; z += 1) {
            clips.push({
                start: lastPause,
                duration: pauses[z + 1].end - lastPause
            });
            lastPause = pauses[z + 1].end;
        }
        clips.push({
            start: lastPause,
            duration: totalClipDuration - lastPause
        });
        return clips;
    };
    ;
    SplitAudio.prototype._getListOfSplitFiles = function (directory) {
        return new Promise(function (resolve, reject) {
            fs.readdir(directory, function (err, files) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(files.map(function (f) { return directory + "/" + f; }));
                }
            });
        });
    };
    ;
    return SplitAudio;
}());
exports.SplitAudio = SplitAudio;
//# sourceMappingURL=split_audio.js.map