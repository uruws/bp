"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeechToText = void 0;
var speech_1 = require("@google-cloud/speech");
var spawn = require('child_process').spawn;
var ffmpeg = __importStar(require("ffmpeg-static"));
var utils_1 = require("./utils");
var fs = __importStar(require("fs"));
var rimraf_1 = __importDefault(require("rimraf"));
var storage_1 = require("@google-cloud/storage");
var transcription_segment_1 = require("./models/transcription_segment");
var SpeechToText = (function () {
    function SpeechToText(credentialsPath, language, enableAutomaticPunctuation) {
        this.enableAutomaticPunctuation = false;
        this.client = new speech_1.v1p1beta1.SpeechClient({
            keyFilename: credentialsPath
        });
        this.storage = new storage_1.Storage({
            projectId: 'talkingpnts',
            keyFilename: credentialsPath
        });
        this.enableAutomaticPunctuation = enableAutomaticPunctuation;
        this.language = language;
    }
    SpeechToText.prototype._getAudioFromUrl = function (sourceFileurl, jobId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        console.log("Downloading file: " + sourceFileurl);
                        var filePath = utils_1.Utils.tempPath + "/" + jobId + ".video";
                        var file = fs.createWriteStream(filePath);
                        var request = require('request').defaults({ encoding: null });
                        request.get(sourceFileurl, function (error, response, body) {
                            if (!error && response.statusCode == 200) {
                                var buff = Buffer.from(body);
                                file.write(buff);
                                resolve(filePath);
                            }
                        });
                    })];
            });
        });
    };
    ;
    SpeechToText.prototype._convertAudio = function (sourceFilePath, jobId) {
        return new Promise(function (resolve, reject) {
            console.log('sourceFilePath:', sourceFilePath);
            var outputDestination = utils_1.Utils.tempPath + "/" + jobId + ".wav";
            var args = ['-i', sourceFilePath, '-ac', '1', '-ab', '6400', '-ar', '8000', outputDestination, '-y'];
            var process = spawn(ffmpeg.default, args);
            process.stdout.on('data', function (data) {
                if (process.env.VERBOSE_FFMPEG) {
                    console.log("stdout: " + data);
                }
            });
            process.stderr.on('data', function (data) {
            });
            process.on('close', function (code) {
                if (code == 1) {
                    console.log("FFMPEG exited with status code 1 while converting " + sourceFilePath);
                    reject();
                }
                else if (code == 0) {
                    resolve(outputDestination);
                }
            });
        });
    };
    ;
    SpeechToText.prototype._uploadToGoogleCloudStorage = function (wavPath, jobId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var bucket;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    bucket = this.storage.bucket("video_captions");
                                    return [4, bucket.upload(wavPath, {})];
                                case 1:
                                    _a.sent();
                                    console.log(wavPath + " uploaded to video_captions.");
                                    console.log();
                                    resolve("gs://video_captions/" + jobId + ".wav");
                                    return [2];
                            }
                        });
                    }); })];
            });
        });
    };
    SpeechToText.prototype._removeFromGoogleCloudStorage = function (jobId) {
        var bucket = this.storage.bucket("video_captions");
        bucket.file(jobId + ".wav").delete();
    };
    SpeechToText.prototype.generateSubs = function (audioUrl, jobId) {
        return __awaiter(this, void 0, void 0, function () {
            var video, wav, gs, config, audio, request, _a, operation, _b, response, words, _c, _d, r, a, subtitiles, currentWords, _e, _f, _g, i, word, start, end, text, timeDiff, nextWordStart;
            var e_1, _h, e_2, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0: return [4, this._getAudioFromUrl(audioUrl, jobId)];
                    case 1:
                        video = _k.sent();
                        return [4, this._convertAudio(video, jobId)];
                    case 2:
                        wav = _k.sent();
                        return [4, this._uploadToGoogleCloudStorage(wav, jobId)];
                    case 3:
                        gs = _k.sent();
                        config = {
                            encoding: 'LINEAR16',
                            languageCode: this.language,
                            model: 'video',
                            useEnhanced: true,
                            enableAutomaticPunctuation: this.enableAutomaticPunctuation,
                            maxAlternatives: 1,
                            enableSpeakerDiarization: true,
                            enableWordTimeOffsets: true,
                        };
                        audio = {
                            uri: gs
                        };
                        request = {
                            config: config,
                            audio: audio,
                        };
                        return [4, this.client.longRunningRecognize(request)];
                    case 4:
                        _a = __read.apply(void 0, [_k.sent(), 1]), operation = _a[0];
                        return [4, operation.promise()];
                    case 5:
                        _b = __read.apply(void 0, [_k.sent(), 1]), response = _b[0];
                        words = [];
                        try {
                            for (_c = __values(response.results), _d = _c.next(); !_d.done; _d = _c.next()) {
                                r = _d.value;
                                a = r.alternatives[0];
                                if (!!a.transcript) {
                                    words = __spread(words, a.words);
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_h = _c.return)) _h.call(_c);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        subtitiles = [];
                        currentWords = [];
                        try {
                            for (_e = __values(words.entries()), _f = _e.next(); !_f.done; _f = _e.next()) {
                                _g = __read(_f.value, 2), i = _g[0], word = _g[1];
                                start = parseFloat(word.startTime.seconds) + word.startTime.nanos / 1000000000;
                                end = parseFloat(word.endTime.seconds) + word.endTime.nanos / 1000000000;
                                text = word.word;
                                timeDiff = 0;
                                if (i + 1 < words.length) {
                                    nextWordStart = parseFloat(words[i + 1].startTime.seconds) + words[i + 1].startTime.nanos / 1000000000;
                                    timeDiff = nextWordStart - end;
                                }
                                currentWords.push({ start: start, end: end, text: text });
                                if (text.endsWith(".") || text.endsWith("?") || timeDiff > 0.1) {
                                    subtitiles.push(new transcription_segment_1.SubtitleSegment(currentWords[0].start, end, currentWords.map(function (w) { return w.text; }).join(" ")));
                                    currentWords = [];
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_j = _e.return)) _j.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        this._removeFromGoogleCloudStorage(jobId);
                        rimraf_1.default(utils_1.Utils.tempPath + "/" + jobId + ".video", function () { });
                        rimraf_1.default(utils_1.Utils.tempPath + "/" + jobId + ".wav", function () { });
                        return [2, subtitiles];
                }
            });
        });
    };
    ;
    return SpeechToText;
}());
exports.SpeechToText = SpeechToText;
//# sourceMappingURL=speechToText.js.map