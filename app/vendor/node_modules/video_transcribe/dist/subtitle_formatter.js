"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleFormatter = void 0;
var SubtitleFormatter = (function () {
    function SubtitleFormatter() {
    }
    SubtitleFormatter._pad_with_zeroes = function (number, length) {
        var out = '' + number;
        while (out.length < length) {
            out = '0' + out;
        }
        return out;
    };
    SubtitleFormatter._convertSecondsToTimestamp = function (value, isSRT) {
        if (isSRT === void 0) { isSRT = false; }
        var h = Math.floor(value / 3600);
        var m = Math.floor(value % 3600 / 60);
        var s = Math.floor((value % 3600) % 60);
        var hours = this._pad_with_zeroes(h, 2);
        var minutes = this._pad_with_zeroes(m, 2);
        var seconds = this._pad_with_zeroes(s, 2);
        var restNum = Math.floor((value - Math.floor(value)) * 1000);
        if (h == 0 && m == 0 && s == 0 && restNum == 0) {
            restNum = 100;
        }
        var rest = this._pad_with_zeroes(restNum, 3);
        return hours + ":" + minutes + ":" + seconds + (isSRT ? ',' : '.') + rest;
    };
    ;
    SubtitleFormatter.format = function (transcriptions, isSRT) {
        var _this = this;
        if (isSRT === void 0) { isSRT = false; }
        var subtitle = isSRT ? '' : 'WEBVTT\n\n';
        transcriptions.forEach(function (t, idx) {
            if (t.transcription != "") {
                var subtitleContent = (idx + 1) + "\n" + _this._convertSecondsToTimestamp(t.start, isSRT) + " --> " + _this._convertSecondsToTimestamp(t.end, isSRT) + "\n" + t.transcription + "\n\n";
                subtitle += subtitleContent;
            }
        });
        return subtitle;
    };
    return SubtitleFormatter;
}());
exports.SubtitleFormatter = SubtitleFormatter;
//# sourceMappingURL=subtitle_formatter.js.map