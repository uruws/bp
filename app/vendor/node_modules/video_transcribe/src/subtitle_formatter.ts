import { SubtitleSegment } from "./models/transcription_segment";

export class SubtitleFormatter {

    static _pad_with_zeroes(number: number, length: number) {
        let out = '' + number;
        while (out.length < length) {
            out = '0' + out;
        }

        return out;
    }

    static _convertSecondsToTimestamp(value: number, isSRT = false) {

        const h: number = Math.floor(value / 3600);
        const m: number = Math.floor(value % 3600 / 60);
        const s: number = Math.floor((value % 3600) % 60);

        const hours = this._pad_with_zeroes(h, 2);
        const minutes = this._pad_with_zeroes(m, 2);
        const seconds = this._pad_with_zeroes(s, 2);
        let restNum = Math.floor((value - Math.floor(value)) * 1000);

        if (h == 0 && m == 0 && s == 0 && restNum == 0) {
            restNum = 100;
        }

        const rest = this._pad_with_zeroes(restNum, 3);

        return `${hours}:${minutes}:${seconds}${isSRT ? ',' : '.'}${rest}`;

    };

    static format(transcriptions: SubtitleSegment[], isSRT: boolean = false): string {
        let subtitle = isSRT ? '' : 'WEBVTT\n\n';

        transcriptions.forEach((t, idx) => {
            if (t.transcription != "") {
                const subtitleContent = (idx + 1) + "\n" + this._convertSecondsToTimestamp(t.start, isSRT) + " --> " + this._convertSecondsToTimestamp(t.end, isSRT) + "\n" + t.transcription + "\n\n";
                subtitle += subtitleContent;
            }
        });

        return subtitle;
    }
}