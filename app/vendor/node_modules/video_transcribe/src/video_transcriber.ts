import { cleanUp } from './clean_up';

import * as fs from 'fs';
import { Utils } from './utils';
import { SubtitleSegment } from './models/transcription_segment';
import { Transcriber } from './transcriber';

export class VideoTranscriber {

    googleCredentialsPath: string;
    enableAutomaticPunctuation: boolean;
    silentLength: number = 0.3;

    constructor(googleCredentialsPath: string, enableAutomaticPunctuation: boolean, silentLength: number = 0.3) {
        this.googleCredentialsPath = googleCredentialsPath;
        if (!fs.existsSync(Utils.tempPath)) {
            fs.mkdirSync(Utils.tempPath);
        }
        this.enableAutomaticPunctuation = enableAutomaticPunctuation;
        this.silentLength = silentLength;
    }

    async transcribe(videoUrl: string, jobId: string): Promise<SubtitleSegment[]> {

        try {
            const transcriber = new Transcriber(this.googleCredentialsPath, "en-us", true);
            const subs = await transcriber.generateSubs(videoUrl, jobId);
            return subs;
            //return subtitles;
        } catch (err) {
            await cleanUp(jobId);
            throw err;
        }

    }
}